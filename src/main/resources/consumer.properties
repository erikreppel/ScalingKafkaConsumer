# topic to read from
topic = testing.kafka

# location of the zookeeper instances
# in the form <host1>:<port1>,<host2>:<port2>,<host3>:<port3> and so on
zookeeper.connect = localhost:2181

# the group name that the consumer should be under
# having multiple consumer with the same group name means they will share offsets
group.id = test.group1

# How long the consumer should wait for a response from zookeeper before timing out
zookeeper.connection.timeout.ms = 10000

# if set to true, the consumer will commit it's offset to kafka
# set to false if you plan on running a consumer with the same group name multiple times
# and want to start reading from the start of the queue
auto.commit.enable = true

# if the consumer doesn't heartbeat to zookeeper in this time period,
# it will be considered dead
zookeeper.session.timeout.ms = 1000

# how often a consumer will report it's offsets to zookeeper.
# consumers get their offsets from zookeeper when they start up.
# if a consumer crashes, zookeeper doesn't know how many messages it consumed
# since its last check in, so when a new consumer is started there will be messages it receives
# that the first consumer already prcessed. But, having very frequent updates to ZK slows down the consumer
zookeeper.sync.time.ms = 100

# throw a timeout exception if a message isn't availible for consumption after this interval
# -1 to never time out consumers (since we will have sitting consumers, this is what we want)
consumer.timeout.ms = -1

# What to do when there is no initial offset in ZooKeeper or if an offset is out of range:
# * smallest : automatically reset the offset to the smallest offset
# * largest : automatically reset the offset to the largest offset
# * anything else: throw exception to the consumer
auto.offset.reset = smallest
